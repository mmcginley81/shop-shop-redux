{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/store.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","products","cart","cartOpen","categories","currentCategory","reducers","state","action","type","product","newState","filter","_id","length","map","purchaseQuantity","createStore","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","dispatch","useDispatch","useSelector","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","value","onChange","target","purchaseQUantity","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useStoreContext","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4228125a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","//import { useReducer } from 'react';\n\n// Trial\n// import { configureStore } from '@reduxjs/toolkit'\n// const store = configureStore({ reducer: cartReducer })\n\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from \"./actions\";\n\nconst initialState = {\n\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: ''\n}\n\nexport const reducers = (state = initialState, action) => {\n    switch (action.type) {\n        //if action type value is the value of \"UPDATE_PRODUCTS\" return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n        return {\n            ...state,\n            products: [...action.products]\n        };\n        \n    case UPDATE_CATEGORIES:  \n        return {\n            ...state, \n            categories: [...action.categories]\n        };\n\n    case UPDATE_CURRENT_CATEGORY:\n        return {\n            ...state,\n            currentCategory: action.currentCategory\n        };\n    \n    case ADD_TO_CART:\n        return {\n            ...state,\n            cartOpen: true,\n            cart: [...state.cart, action.product]\n        };\n\n    case ADD_MULTIPLE_TO_CART:\n        return {\n            ...state,\n            cart: [...state.cart, ...action.products]\n        };\n\n    case REMOVE_FROM_CART:\n        let newState = state.cart.filter(product => {\n            return product._id !== action._id;\n        });\n\n        return {\n            ...state,\n            cartOpen: newState.length > 0,\n            cart: newState\n        };\n\n    case UPDATE_CART_QUANTITY:\n        return {\n            ...state,\n            cartOpen: true,\n            cart: state.cart.map(product => {\n                if(action._id === product._id) {\n                    product.purchaseQuantity = action.purchaseQuantity;\n                }\n                return product;\n            })\n        };\n\n    case CLEAR_CART:\n        return {\n            ...state,\n            cartOpen: false,\n            cart: []\n        };\n\n    case TOGGLE_CART:\n        return {\n            ...state,\n            cartOpen: !state.cartOpen\n        };\n\n        // if it's none of these actions, do not update state at all and keep things the same!\n        default:\n            return state;\n    }\n\n};\n\n\nexport default reducers;\n\n// export function useProductReducer(initialState) {\n//     return useReducer(reducer, initialState);\n// };","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n\n\n\n","import { createStore } from 'redux';\r\nimport reducers from './reducers';\r\n\r\n\r\n\r\nexport default createStore(reducers);","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductItem(item) {\n  // const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const { cart } = state\n\n  const addToCart = () => {\n    //find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    \n    // if there was a match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n\n`;\n\nexport const QUERY_CHECKOUT = gql`\n\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n\n`;","import React, {useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\n\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\";\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n\n  //const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      // but let's also take each product and save it to IndexedDB using the helper function \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if 'loading' is undefined in useQuery() hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the 'products' store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;","import React, { useEffect } from \"react\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n  \n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  \n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  }\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch } from 'react-redux';\n\nconst CartItem = ({ item }) => {\n\n  //const [, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n\n      idbPromise('cart', 'delete', { ...item })\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n\n      idbPromise('cart', 'put', { ...item, purchaseQUantity: parseInt(value) });\n    }\n  }\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport CartItem from \"../CartItem\";\nimport Auth from \"../../utils/auth\";\nimport { useLazyQuery } from '@apollo/react-hooks';\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { QUERY_CHECKOUT } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport \"./styles.css\";\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\n\nconst Cart = () => {\n  //const [state, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const [getCheckout, { data}] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n      async function getCart() {\n          const cart = await idbPromise('cart', 'get');\n          dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n      };\n\n      if (!state.cart.length) {\n          getCart();\n      }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  //for stripe\n  useEffect(() => {\n    if (data) {\n        stripePromise.then((res) => {\n            res.redirectToCheckout({ sessionId: data.checkout.session });\n        });\n    }\n  }, [data]);\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout(){\n      const productIds = [];\n\n      state.cart.forEach((item) => {\n          for (let i=0; i < item.purchaseQuantity; i++) {\n            productIds.push(item._id);\n          }\n      })\n\n      getCheckout({\n          variables: { products: productIds }\n      })\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n              </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n          <h3>\n            <span role=\"img\" aria-label=\"shocked\">\n              😱\n          </span>\n          You haven't added anything to your cart yet!\n          </h3>\n        )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  //const [currentCategory, setCategory] = useState(\"\");\n\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport Cart from \"../components/Cart\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from \"../utils/actions\";\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport { idbPromise } from \"../utils/helpers\";\nimport spinner from '../assets/spinner.gif'\n\n\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n  \n  const [currentProduct, setCurrentProduct] = useState({})\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      \n    } else {\n    dispatch({\n      type: ADD_TO_CART,\n      product: { ...currentProduct, purchaseQuantity: 1 }\n    });\n   \n    // if product isn't in the cart yet, add it to the current shopping cart\n    idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1});\n   }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button\n            disabled={!cart.find(p => p._id === currentProduct._id)}\n            onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n          <img src=\"../../public/images/404.png\" alt=\"Darth Vader disapproves of your lack of navigation\" />\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map(item => item._id);\n      \n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n    \n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n        \n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>\n          Thank you for your purchase!\n        </h2>\n        <h2>\n          You will now be redirected to the home page\n        </h2>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Success;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\n//import { Provider } from './utils/GlobalState';\nimport store from './utils/store';\nimport { Provider } from 'react-redux';\n\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport Success from \"./pages/Success\"\n\nimport OrderHistory from \"./pages/OrderHistory\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n          <Nav />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\n            <Route exact path=\"/products/:id\" component={Detail} />\n            <Route exact path=\"/success\" component={Success} />\n            <Route component={NoMatch} />\n          </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}